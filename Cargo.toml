[workspace]
members = [
    "crates/codetriever",
    "crates/codetriever-api",
    "crates/codetriever-common",
    "crates/codetriever-config",
    "crates/codetriever-meta-data",
    "crates/codetriever-embeddings",
    "crates/codetriever-vector-data",
    "crates/codetriever-parsing",
    "crates/codetriever-search",
    "crates/codetriever-indexing",
]
resolver = "3"

[workspace.package]
version = "0.1.0"
edition = "2024"
license = "MIT"
authors = ["LaFollett Labs LLC"]
repository = "https://github.com/clafollett/codetriever"

[workspace.dependencies]
# Async runtime
tokio = { version = "1", features = ["full"] }
tokio-util = "0.7"
futures = "0.3.31"
async-trait = "0.1.89"

# Web framework
axum = { version = "0.8.3", features = ["json", "macros", "ws", "multipart"] }
tower = { version = "0.5.2", features = ["util"] }
reqwest = { version = "0.12.19", default-features = false, features = [
    "json",
    "stream",
    "rustls-tls",
] }

# Date/Time
chrono = "0.4"
uuid = { version = "1.10", features = ["v4", "v5", "serde"] }

# Database
sqlx = { version = "0.8", features = [
    "runtime-tokio",
    "postgres",
    "uuid",
    "chrono",
    "migrate",
] }

# Serialization
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
toml = "0.8"
schemars = "0.8.22"

# Error handling
anyhow = "1.0"
thiserror = "2.0"

# Logging
log = "0.4"
tracing = "0.1"
tracing-appender = "0.2.3"
tracing-subscriber = { version = "0.3", features = ["json", "env-filter"] }

# CLI
clap = { version = "4", features = ["derive"] }

# Utils
regex = "1.11.1"
urlencoding = "2.1.3"
dirs = "6"
tempfile = "3"
dotenv = "0.15"
lazy_static = "1.5.0"
once_cell = "1.20"
lru = "0.12.5"
bytes = "1"
walkdir = "2.5"
ignore = "0.4"
rayon = "1.10"

# Performance & Observability
metrics = "0.24.2"
metrics-exporter-prometheus = "0.17.2"
opentelemetry = "0.30.0"
opentelemetry-otlp = "0.30.0"
tracing-opentelemetry = "0.31.0"

# Cryptography
sha2 = "0.10"

# Git integration
git2 = "0.19"

# ML/AI dependencies
candle-core = "0.9.1"
candle-nn = "0.9.1"
candle-transformers = "0.9.1"
hf-hub = { version = "0.4.3", features = ["tokio"] }
tokenizers = { version = "0.22.0", default-features = false, features = ["onig"] }
tiktoken-rs = "0.6"

# Vector database
qdrant-client = "1.15"

# Tree-sitter language support
tree-sitter = "0.25.8"
tree-sitter-rust = "0.24.0"
tree-sitter-python = "0.23.6"
tree-sitter-javascript = "0.25.0"
tree-sitter-typescript = "0.23.2"
tree-sitter-go = "0.25.0"
tree-sitter-c = "0.24.1"
tree-sitter-cpp = "0.23.4"
tree-sitter-java = "0.23.5"
tree-sitter-c-sharp = "0.23.1"
tree-sitter-json = "0.24.8"
tree-sitter-xml = "0.7.0"
tree-sitter-yaml = "0.7.1"
tree-sitter-bash = "0.25.0"
tree-sitter-html = "0.23.2"
tree-sitter-powershell = "0.25.8"
tree-sitter-sequel = "0.3.8"

# MCP/Agenterra
agenterra-rmcp = { version = "0.1.5", features = [
    "macros",
    "server",
    "transport-sse-server",
    "transport-io",
    "auth",
] }

# API Documentation
utoipa = "5.3.1"
utoipa-swagger-ui = "9.0.1"

# Signal handling
signal-hook = "*"
signal-hook-tokio = "0.3.1"

# Template engine
tera = "1.17"

# Dev/Test dependencies
wiremock = "0.6"
tokio-test = "0.4"

[workspace.lints.clippy]
# Enforce pedantic and nursery lint groups for better code quality
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }

# STRICT: Error handling - forces proper error handling in production code
unwrap_used = "warn"        # Forces us to handle errors properly
expect_used = "warn"        # Forces better error messages
panic = "warn"              # No explicit panics in production code

# STRICT: Safety and correctness
indexing_slicing = "warn"   # Forces bounds checking with .get()
arithmetic_side_effects = "warn"  # Prevents overflow bugs

# STRICT: Code quality and idioms  
uninlined_format_args = "deny"  # MUST use format!("{x}") instead of format!("{}", x) - cleaner!
wildcard_imports = "warn"   # Forces explicit imports
enum_glob_use = "warn"      # No glob imports from enums
if_not_else = "warn"        # Prevents confusing negative conditions
items_after_statements = "warn"  # Forces declarations before code
match_same_arms = "warn"    # Prevents duplicate match arms
semicolon_if_nothing_returned = "warn"  # Forces explicit returns
use_self = "warn"           # Forces using Self in impl blocks
clone_on_ref_ptr = "warn"   # Prevents unnecessary Arc/Rc clones
inefficient_to_string = "warn"  # Forces efficient string conversions

# STRICT: Documentation - forces AI agents to document code properly!
missing_docs_in_private_items = "allow"  # Don't require docs for private items
# But DO require docs for public items (comes with pedantic)

# STRICT: Documentation for safety-critical information
missing_errors_doc = "warn"      # Document what errors functions can return
missing_panics_doc = "warn"      # Document when functions might panic

# Relaxed: Allow some patterns that are common/acceptable
must_use_candidate = "allow"     # Don't require #[must_use] everywhere
module_name_repetitions = "allow"  # Allow IndexerError in indexer module
too_many_lines = "allow"         # Don't limit function length
cognitive_complexity = "allow"    # Don't limit function complexity
needless_for_each = "allow"      # Derive macros sometimes generate this pattern

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = true

[profile.dev]
opt-level = 0
debug = true
