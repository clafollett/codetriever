openapi: 3.0.3
info:
  title: Codetriever API
  description: |
    Codetriever provides semantic code search capabilities for large codebases.
    It runs as a local MCP server with an embedded file watcher that automatically
    keeps the index fresh as you code.
    
    **When to use Codetriever:**
    - Exploring unfamiliar codebases
    - Finding implementation patterns
    - Understanding code dependencies
    - Locating similar code for refactoring
    - Answering "where is X implemented?" questions
    
    **Key capabilities:**
    - Semantic search (understands meaning, not just text matching)
    - Automatic indexing via file watcher
    - Sub-10ms search responses
    - Works with any size codebase
    - Privacy-first (everything stays local)
  version: 0.1.0
  contact:
    name: Codetriever Team
    url: https://github.com/clafollett/codetriever

servers:
  - url: http://localhost:8080
    description: Local MCP server

paths:
  /search:
    post:
      summary: Search code by meaning, not just text
      description: |
        Use this when you need to find code that implements a concept or pattern.
        This understands semantic meaning - searching for "authentication" will find
        login functions, JWT validation, password checking, etc. even if they don't
        contain the word "authentication". Perfect for exploring unfamiliar codebases
        or finding implementation patterns.
      operationId: search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /similar:
    post:
      summary: Find code similar to a given snippet
      description: |
        Use this when you have an example of code and want to find similar implementations.
        Useful for: finding duplicated logic that could be refactored, locating all error
        handling patterns similar to one you're reviewing, or discovering variations of
        the same algorithm. Returns code chunks ranked by similarity score.
      operationId: findSimilar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimilarRequest'
      responses:
        '200':
          description: Similar code chunks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /context:
    post:
      summary: Get surrounding code context for a specific location
      description: |
        Use this when you need to understand code in its full context. Given a file
        and line number, returns the surrounding code including function signatures,
        class definitions, imports, and nearby related code. Essential when you need
        to see the "bigger picture" around a specific piece of code.
      operationId: getContext
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextRequest'
      responses:
        '200':
          description: Code context
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextResponse'

  /usages:
    post:
      summary: Find all usages of a function, class, or variable
      description: |
        Use this to trace how a symbol is used throughout the codebase. Perfect for
        understanding impact of changes, finding all callers of a function, tracking
        down where a variable is modified, or analyzing dependencies. Distinguishes
        between definitions and references.
      operationId: findUsages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsagesRequest'
      responses:
        '200':
          description: Symbol usages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagesResponse'

  /index:
    post:
      summary: Refresh the code index (usually automatic)
      description: |
        Triggers a reindex of the codebase. Usually runs automatically via file watcher,
        but use this when: switching branches and need immediate index update, after
        large refactoring, when status shows stale files, or to force a full rebuild.
        Returns immediately with job ID (async mode) or waits for completion (sync mode).
        Check progress via the /status endpoint.
      operationId: index
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexRequest'
      responses:
        '200':
          description: Index job started (async) or completed (sync)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndexJobResponse'
                  - $ref: '#/components/schemas/IndexStatsResponse'

  /status:
    get:
      summary: Check health, index jobs, and performance metrics
      description: |
        Use this to understand the current state of the codetriever system. Shows:
        active indexing jobs and their progress, file watcher status, index freshness,
        performance metrics, and any errors. Check this when searches seem slow or
        outdated, before starting large operations, or to monitor background indexing.
      operationId: getStatus
      responses:
        '200':
          description: Detailed status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /stats:
    get:
      summary: Get quick index statistics
      description: |
        Lightweight endpoint for basic metrics. Use when you just need numbers:
        total files indexed, chunk count, database size, last update time. Faster
        than /status when you don't need detailed job information.
      operationId: getStats
      responses:
        '200':
          description: Index statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

  /clean:
    post:
      summary: Clean up outdated index entries
      description: |
        Maintenance operation to remove stale data. Use when: index size grows too large,
        after deleting many files, to remove entries older than X days, or when switching
        between branches frequently. Frees up disk space and improves search performance.
      operationId: clean
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanRequest'
      responses:
        '200':
          description: Cleanup results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanResponse'

  /compact:
    post:
      summary: Optimize database for better performance
      description: |
        Runs database optimization to improve query speed and reduce file size.
        Similar to SQL Server index rebuild or PostgreSQL VACUUM. Use monthly or
        when /status shows degraded search performance. Safe to run anytime but
        may temporarily slow searches during compaction.
      operationId: compact
      responses:
        '200':
          description: Compaction results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompactResponse'

components:
  schemas:
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Natural language search query
          example: "authentication logic"
          examples:
            - "database connection pooling"
            - "error handling for file uploads"
            - "JWT token validation"
            - "recursive tree traversal"
        limit:
          type: integer
          default: 10
          minimum: 1
          maximum: 100
        threshold:
          type: number
          format: float
          default: 0.7
          minimum: 0.0
          maximum: 1.0

    SearchResponse:
      type: object
      properties:
        chunks:
          type: array
          items:
            $ref: '#/components/schemas/CodeChunk'
        query_time_ms:
          type: integer

    CodeChunk:
      type: object
      properties:
        file:
          type: string
          example: "src/auth.rs"
        line_start:
          type: integer
        line_end:
          type: integer
        content:
          type: string
        similarity:
          type: number
          format: float
        symbols:
          type: array
          items:
            type: string

    SimilarRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Code snippet to find similar to
        limit:
          type: integer
          default: 10
        exclude_file:
          type: string
          description: File to exclude from results

    ContextRequest:
      type: object
      required:
        - file
        - line
      properties:
        file:
          type: string
        line:
          type: integer
        radius:
          type: integer
          default: 20
          description: Lines before and after

    ContextResponse:
      type: object
      properties:
        file:
          type: string
        content:
          type: string
        line_start:
          type: integer
        line_end:
          type: integer
        symbols:
          type: array
          items:
            type: string

    UsagesRequest:
      type: object
      required:
        - symbol
      properties:
        symbol:
          type: string
        usage_type:
          type: string
          enum: ["all", "definitions", "references"]
          default: "all"

    UsagesResponse:
      type: object
      properties:
        usages:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
              line:
                type: integer
              usage_type:
                type: string
                enum: ["definition", "reference"]
              content:
                type: string

    IndexRequest:
      type: object
      properties:
        mode:
          type: string
          enum: ["full", "incremental"]
          default: "incremental"
        is_async:
          type: boolean
          default: true
          description: Return immediately (MCP) or wait (CLI)
        paths:
          type: array
          items:
            type: string
          description: Specific paths to index
        timeout_ms:
          type: integer
          default: 30000
          description: Max wait time for async operations

    IndexJobResponse:
      type: object
      properties:
        job_id:
          type: string
          format: uuid
        status:
          type: string
          enum: ["queued", "started"]
        message:
          type: string

    IndexStatsResponse:
      type: object
      properties:
        files_processed:
          type: integer
        chunks_created:
          type: integer
        duration_ms:
          type: integer
        errors:
          type: array
          items:
            type: string

    StatusResponse:
      type: object
      properties:
        server:
          type: object
          properties:
            version:
              type: string
            uptime_seconds:
              type: integer
            pid:
              type: integer
        index:
          type: object
          properties:
            jobs:
              type: array
              items:
                $ref: '#/components/schemas/IndexJob'
            stats:
              $ref: '#/components/schemas/IndexStats'
        watcher:
          type: object
          properties:
            enabled:
              type: boolean
            watching_paths:
              type: array
              items:
                type: string
            events_last_minute:
              type: integer
            queue_size:
              type: integer
        performance:
          type: object
          properties:
            avg_search_ms:
              type: number
            avg_index_ms_per_file:
              type: number
            memory_usage_mb:
              type: number

    IndexJob:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: ["full", "incremental"]
        status:
          type: string
          enum: ["queued", "processing", "completed", "failed"]
        progress:
          type: object
          properties:
            current:
              type: integer
            total:
              type: integer
            percent:
              type: number
            eta_seconds:
              type: integer
        started:
          type: string
          format: date-time
        completed:
          type: string
          format: date-time

    IndexStats:
      type: object
      properties:
        total_files:
          type: integer
        indexed_files:
          type: integer
        stale_files:
          type: integer
        total_chunks:
          type: integer
        index_size_mb:
          type: number
        last_update:
          type: string
          format: date-time

    StatsResponse:
      type: object
      properties:
        files:
          type: integer
        chunks:
          type: integer
        vectors:
          type: integer
        db_size_mb:
          type: number
        last_indexed:
          type: string
          format: date-time

    CleanRequest:
      type: object
      properties:
        older_than:
          type: string
          description: Duration string (e.g., "7d", "1h")
        missing_files:
          type: boolean
          default: false

    CleanResponse:
      type: object
      properties:
        removed_chunks:
          type: integer
        freed_space_mb:
          type: number

    CompactResponse:
      type: object
      properties:
        before_size_mb:
          type: number
        after_size_mb:
          type: number
        duration_ms:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              enum: ["INDEX_IN_PROGRESS", "INVALID_QUERY", "TIMEOUT", "INTERNAL_ERROR"]
            message:
              type: string
            details:
              type: object