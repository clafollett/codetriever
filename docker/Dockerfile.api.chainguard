# Secure Rust build with Chainguard images
# Build stage - using official Rust slim image
FROM rust:1.89-slim AS builder

# Install minimal build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    musl-tools \
    && rm -rf /var/lib/apt/lists/*

# Add musl target for static compilation
RUN rustup target add x86_64-unknown-linux-musl

WORKDIR /app

# Copy workspace and all crates
COPY Cargo.toml Cargo.lock ./
COPY crates crates

# Build and strip binary (not using musl to avoid ring issues)
RUN cargo build --release -p codetriever-api && \
    strip /app/target/release/codetriever-api

# Runtime stage - Chainguard glibc image (secure, minimal)
FROM cgr.dev/chainguard/glibc-dynamic:latest

# Copy binary from builder
COPY --from=builder /app/target/release/codetriever-api /codetriever-api

# Run as nonroot user (UID 65532)
USER 65532

# Environment variables
ENV RUST_LOG=info
ENV QDRANT_URL=http://qdrant:6333

EXPOSE 8080

ENTRYPOINT ["/codetriever-api"]