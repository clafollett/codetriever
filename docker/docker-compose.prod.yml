name: codetriever-prod

services:
  postgres:
    image: postgres:16-alpine
    container_name: codetriever-prod-postgres
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    environment:
      - POSTGRES_USER=${DB_USER:-codetriever}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}  # MUST override in production
      - POSTGRES_DB=${DB_NAME:-codetriever}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-codetriever} -d ${DB_NAME:-codetriever}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  qdrant:
    image: qdrant/qdrant:latest
    container_name: codetriever-prod-qdrant
    ports:
      - "127.0.0.1:6333:6333"  # Only bind to localhost
      - "127.0.0.1:6334:6334"
    volumes:
      # TODO: Consider external volume management for production (AWS EBS, GCP PD, etc.)
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=${QDRANT_LOG_LEVEL:-WARN}
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-}
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=256
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  api:
    image: codetriever/api:latest
    container_name: codetriever-prod-api
    ports:
      - "127.0.0.1:8080:8080"  # Only bind to localhost
    environment:
      - RUST_LOG=warn
      - RUST_BACKTRACE=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-codetriever}
      - DB_USER=${DB_USER:-codetriever}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      - QDRANT_COLLECTION=${QDRANT_COLLECTION:-codetriever}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-jinaai/jina-embeddings-v2-base-code}
      - USE_METAL=false
      - MAX_CHUNK_SIZE=512
      - CHUNK_OVERLAP=50
    volumes:
      # TODO: Consider cloud storage or persistent volume for production cache
      - api_cache:/app/cache
      # TODO: Define REPOS_PATH strategy for production (S3, NFS, or managed volume)
      - ${REPOS_PATH:-./repos}:/app/repos:ro
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: always
    healthcheck:
      # TODO: Update when we implement a proper health endpoint
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: codetriever-prod-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: always
    profiles:
      - with-proxy

volumes:
  postgres_data:
    driver: local
  qdrant_storage:
    driver: local
  api_cache:
    driver: local

networks:
  default:
    name: codetriever-network
    driver: bridge